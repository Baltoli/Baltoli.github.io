webpackHotUpdate("static/development/pages/index.js",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_obfuscate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-obfuscate */ "./node_modules/react-obfuscate/dist/obfuscate.js");
/* harmony import */ var react_obfuscate__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_obfuscate__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _components_PageHead__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/PageHead */ "./components/PageHead.js");
/* harmony import */ var _components_TwoColumn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/TwoColumn */ "./components/TwoColumn.js");
var _jsxFileName = "/Users/brucecollie/code/site/pages/index.js";



function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }






var Profile = function Profile() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-895087034",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 8
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("img", {
    src: "/static/me.jpg",
    className: "jsx-895087034",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "895087034",
    css: "img.jsx-895087034{border-radius:30px;display:block;margin-left:auto;max-width:75%;-webkit-filter:drop-shadow(0 0 8px #BBB);filter:drop-shadow(0 0 8px #BBB);}h1.jsx-895087034{text-align:center;}@media(max-width:600px){img.jsx-895087034{max-width:100%;margin:0 auto;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

var AboutMe = function AboutMe() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 35
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h2", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 36
    },
    __self: this
  }, "about me"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 37
    },
    __self: this
  }, "I am a third-year PhD student at the University of Edinburgh, supervised by ", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "http://www.dcs.ed.ac.uk/home/mob/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 38
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39
    },
    __self: this
  }, "Professor Michael O'Boyle")), ". My primary research goal is to improve the integration of heterogenous accelerators and user code, giving compilers new techniques for optimising performance-sensitive workloads. Currently, my focus is on two-phase type-directed program synthesis as a way of learning the behaviour of black-box interfaces."), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 45
    },
    __self: this
  }, "In addition to my PhD, I am an intern at the ", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "http://web.inf.ed.ac.uk/infweb/partners/edinburgh-huawei-research-lab",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46
    },
    __self: this
  }, "Huawei Edinburgh Research Center")), ", where I work on compiler and runtime library support for heterogenous deep learning accelerators."), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 51
    },
    __self: this
  }, "In my free time I play rugby at ", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "https://twitter.com/LismoreRFC",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52
    },
    __self: this
  }, "Lismore RFC")), ", and enjoy good food, coffee and live music as much as I can."), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h2", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56
    },
    __self: this
  }, "contact"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 57
    },
    __self: this
  }, "You can email me at ", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_obfuscate__WEBPACK_IMPORTED_MODULE_3___default.a, {
    email: "bruce.collie@ed.ac.uk",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 58
    },
    __self: this
  }), ", and all my code is on ", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "https://github.com/baltoli",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 59
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
    className: "jsx-4117862308",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 59
    },
    __self: this
  }, "Github")), "."), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "4117862308",
    css: "\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

var ResumeItem = function ResumeItem(_ref) {
  var name = _ref.name,
      place = _ref.place,
      date = _ref.date,
      description = _ref.description;
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-579762926",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 70
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
    className: "jsx-579762926",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 71
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-579762926" + " " + "placeTime",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 72
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
    className: "jsx-579762926" + " " + "place",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 73
    },
    __self: this
  }, place), " (", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
    className: "jsx-579762926" + " " + "date",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 73
    },
    __self: this
  }, date), ")"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-579762926" + " " + "degree",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 75
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
    className: "jsx-579762926" + " " + "name",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 76
    },
    __self: this
  }, name), ": ", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
    className: "jsx-579762926" + " " + "description",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 76
    },
    __self: this
  }, description))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "579762926",
    css: ".place.jsx-579762926{font-weight:bold;}li.jsx-579762926{margin-top:1.2em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

var WorkLink = function WorkLink(_ref2) {
  var name = _ref2.name,
      link = _ref2.link;
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
    className: "jsx-3940750827",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: link,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
    className: "jsx-3940750827",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97
    },
    __self: this
  }, name)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "3940750827",
    css: "a.jsx-3940750827{text-transform:lowercase;}span.jsx-3940750827{margin-left:0.75em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

var WorkItem = function WorkItem(_ref3) {
  var name = _ref3.name,
      description = _ref3.description,
      props = _objectWithoutProperties(_ref3, ["name", "description"]);

  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-109741588",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
    className: "jsx-109741588",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 111
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-109741588" + " " + "info",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
    className: "jsx-109741588" + " " + "name",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113
    },
    __self: this
  }, name), props.children), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-109741588",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 117
    },
    __self: this
  }, description)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "109741588",
    css: "li.jsx-109741588{margin-top:1.2em;}.name.jsx-109741588{font-weight:bold;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

var ResumeList = function ResumeList(_ref4) {
  var align = _ref4.align,
      title = _ref4.title,
      props = _objectWithoutProperties(_ref4, ["align", "title"]);

  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a.dynamic([["1327720175", [align]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h2", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a.dynamic([["1327720175", [align]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136
    },
    __self: this
  }, title), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a.dynamic([["1327720175", [align]]]),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137
    },
    __self: this
  }, props.children), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "1327720175",
    css: "ul.__jsx-style-dynamic-selector{list-style-type:none;margin:0;padding:0;}div.__jsx-style-dynamic-selector{text-align:".concat(align, ";}@media(max-width:600px){div.__jsx-style-dynamic-selector{text-align:left;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */"),
    dynamic: [align],
    __self: this
  }));
};

var Education = function Education() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResumeList, {
    align: "right",
    title: "education",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 162
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResumeItem, {
    name: "PhD Pervasive Parallelism",
    place: "University of Edinburgh",
    date: "2018\u2013",
    description: "in progress",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 163
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResumeItem, {
    name: "MScR Pervasive Parallelism",
    place: "University of Edinburgh",
    date: "2017\u201318",
    description: "Distinction",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 170
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResumeItem, {
    name: "MEng Computer Science",
    place: "University of Cambridge",
    date: "2016\u201317",
    description: "Distinction",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResumeItem, {
    name: "BA Computer Science",
    place: "University of Cambridge",
    date: "2013\u201316",
    description: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 188
      },
      __self: this
    }, "1", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("sup", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 188
      },
      __self: this
    }, "st"), " Class"),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184
    },
    __self: this
  }));
};

var ResearchItem = function ResearchItem(_ref5) {
  var award = _ref5.award,
      venue = _ref5.venue,
      title = _ref5.title,
      type = _ref5.type,
      link = _ref5.link,
      date = _ref5.date,
      pdf = _ref5.pdf,
      slides = _ref5.slides,
      ieee = _ref5.ieee,
      acm = _ref5.acm,
      video = _ref5.video;
  var awardText;
  var pdfLink;
  var slidesLink;
  var ieeeLink;
  var acmLink;
  var videoLink;

  if (award !== undefined) {
    awardText = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      style: {
        fontVariant: "small-caps",
        fontWeight: "bold"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 202
      },
      __self: this
    }, " ", award);
  } else {
    awardText = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null);
  }

  if (pdf !== undefined) {
    pdfLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
      name: "pdf",
      link: pdf,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 208
      },
      __self: this
    });
  } else {
    pdfLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null);
  }

  if (slides !== undefined) {
    slidesLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
      name: "slides",
      link: slides,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 214
      },
      __self: this
    });
  } else {
    slidesLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null);
  }

  if (ieee !== undefined) {
    ieeeLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
      name: "IEEE",
      link: ieee,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 220
      },
      __self: this
    });
  } else {
    ieeeLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null);
  }

  if (acm !== undefined) {
    acmLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
      name: "ACM",
      link: acm,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 226
      },
      __self: this
    });
  } else {
    acmLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null);
  }

  if (video !== undefined) {
    videoLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
      name: "video",
      link: video,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 232
      },
      __self: this
    });
  } else {
    videoLink = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null);
  }

  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1946793254",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 238
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
    className: "jsx-1946793254",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1946793254" + " " + "title",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 240
    },
    __self: this
  }, title), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1946793254" + " " + "info",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243
    },
    __self: this
  }, type, " at ", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: link,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
    className: "jsx-1946793254",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244
    },
    __self: this
  }, venue, " ", date)), acmLink, ieeeLink, pdfLink, slidesLink, videoLink, awardText)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "1946793254",
    css: ".title.jsx-1946793254{font-weight:bold;}li.jsx-1946793254{margin-top:1.2em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

var Research = function Research() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResumeList, {
    align: "right",
    title: "research",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 268
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResearchItem, {
    title: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 270
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 271
      },
      __self: this
    }, "Modeling Black-Box Components"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 272
      },
      __self: this
    }, "\xA0with Probabilistic Synthesis")),
    award: "best paper",
    type: "Conference Paper",
    venue: "GPCE",
    date: "2020",
    link: "https://conf.researchr.org/home/gpce-2020",
    pdf: "static/gpce.pdf",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 269
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResearchItem, {
    title: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 283
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 284
      },
      __self: this
    }, "M", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("sup", {
      className: "jsx-1971687809",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 284
      },
      __self: this
    }, "3"), ": Semantic API Migration")),
    type: "Conference Paper",
    venue: "ASE",
    date: "2020",
    link: "https://conf.researchr.org/home/ase-2020",
    pdf: "static/ase.pdf",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 282
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResearchItem, {
    title: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 294
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 295
      },
      __self: this
    }, "Retrofitting Symbolic Holes to LLVM IR")),
    type: "Workshop Presentation",
    venue: "TyDe",
    date: "2020",
    link: "https://icfp20.sigplan.org/home/tyde-2020",
    pdf: "static/tyde20.pdf",
    video: "https://www.youtube.com/watch?v=8XiFMk-_bhw",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 293
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResearchItem, {
    title: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 306
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 307
      },
      __self: this
    }, "Automatically Harnessing Sparse Acceleration")),
    type: "Conference Paper",
    venue: "CC",
    date: "2020",
    link: "https://conf.researchr.org/home/CC-2020",
    pdf: "static/cc.pdf",
    acm: "https://dl.acm.org/doi/10.1145/3377555.3377893",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 305
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResearchItem, {
    title: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 318
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 319
      },
      __self: this
    }, "Type-Directed Program Synthesis"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 320
      },
      __self: this
    }, "\xA0and Constraint Generation for Library Portability")),
    type: "Conference Paper",
    venue: "PACT",
    date: "2019",
    link: "https://hpc.pnl.gov/pact19/",
    pdf: "static/pact.pdf",
    slides: "static/pact_slides.pdf",
    ieee: "https://ieeexplore.ieee.org/document/8891611",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 317
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResearchItem, {
    title: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 332
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 333
      },
      __self: this
    }, "Augmenting Type Signatures"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "jsx-1971687809" + " " + "line",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 334
      },
      __self: this
    }, "\xA0for Program Synthesis")),
    type: "Workshop Presentation",
    venue: "TyDe",
    date: "2019",
    link: "https://icfp19.sigplan.org/home/tyde-2019",
    pdf: "static/tyde.pdf",
    slides: "static/tyde_slides.pdf",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 331
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "1971687809",
    css: "span.line.jsx-1971687809{display:inline-block;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

var Work = function Work() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ResumeList, {
    align: "left",
    title: "work and projects",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 353
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkItem, {
    name: "Program Synthesis",
    description: " The main focus of my MScR and PhD work so far is the development of program synthesis techniques that aim to learn the behaviour of black-box interfaces. My approach uses two-phase synthesis driven by type heuristics to synthesise complex control flow. ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 354
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "Github",
    link: "https://github.com/baltoli/accsynt",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 362
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "Dissertation",
    link: "static/msc.pdf",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 366
    },
    __self: this
  })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkItem, {
    name: "TESLA",
    description: " During my MEng I contributed to TESLA, an existing project that allows for temporal assertions to be added to C programs and checked at runtime. I used model-checking to prove that individual assertions could be safely removed, improving the performance of programs using TESLA. ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 372
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "Github",
    link: "https://github.com/cadets/tesla-static-analysis",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 381
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "Dissertation",
    link: "static/tesla.pdf",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 386
    },
    __self: this
  })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkItem, {
    name: "GoCardless",
    description: " At GoCardless I was a member of the Core Payments team, responsible for developing the infrastructure used by the company to process Direct Debit transactions. I investigated bugs, contributed to new features, and worked on upgrading legacy code. ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 392
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "About",
    link: "https://www.gocardless.com",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 400
    },
    __self: this
  })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkItem, {
    name: "PCL",
    description: " My undergraduate final project was an implementation of the \u03C0-calculus, a minimal expression of concurrent message-passing semantics. I developed a compiler and virtual machine for this language, as well as a library of example programs demonstrating its usage. ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 406
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "Github",
    link: "https://github.com/baltoli/pcl",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 415
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "Dissertation",
    link: "static/pcl.pdf",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 420
    },
    __self: this
  })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkItem, {
    name: "RealVNC",
    description: " At RealVNC I developed a prototype implementation of Apple's CarPlay software to run on the company's internal in-car entertainment platform. This involved writing kernel modules and patches for the Linux kernel's USB subsystem, as well as a driver for the CarPlay protocol. ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 426
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkLink, {
    name: "About",
    link: "https://www.realvnc.com",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 435
    },
    __self: this
  })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(WorkItem, {
    name: "Other",
    description: " In 2015 I was responsible for managing the website, ticketing system and admissions for the Trinity Hall June Event, attended by roughly 2000 guests. I have also worked as a freelance iOS and backend developer on a number of projects. ",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 441
    },
    __self: this
  }));
};

var Index = function Index() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-247033640",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 454
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_PageHead__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 455
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_TwoColumn__WEBPACK_IMPORTED_MODULE_5__["default"], {
    header: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h1", {
      className: "jsx-247033640",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 458
      },
      __self: this
    }, "bruce collie"),
    left: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Profile, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 459
      },
      __self: this
    }),
    right: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(AboutMe, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 460
      },
      __self: this
    }),
    center: true,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 457
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_TwoColumn__WEBPACK_IMPORTED_MODULE_5__["default"], {
    header: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h1", {
      className: "jsx-247033640",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 465
      },
      __self: this
    }, "resume"),
    left: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "jsx-247033640",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 466
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Research, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 466
      },
      __self: this
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Education, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 466
      },
      __self: this
    })),
    right: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Work, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 467
      },
      __self: this
    }),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 464
    },
    __self: this
  }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "247033640",
    css: "\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/brucecollie/code/site/pages/index.js */",
    __self: this
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (Index);
    (function (Component, route) {
      if(!Component) return
      if (false) {}
      module.hot.accept()
      Component.__route = route

      if (module.hot.status() === 'idle') return

      var components = next.router.components
      for (var r in components) {
        if (!components.hasOwnProperty(r)) continue

        if (components[r].Component.__route === route) {
          next.router.update(r, Component)
        }
      }
    })(typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__.default : (module.exports.default || module.exports), "/")
  
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=index.js.ae08db7b3efd55ab91d4.hot-update.js.map